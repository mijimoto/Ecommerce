package com.mijimoto.ECommerce.auth.services;

import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.util.Objects;

/**
 * Redis helpers for auth-related ephemeral tokens:
 *  - access JTIs: auth:access:<jti>
 *  - email verification codes: auth:verify:<code>
 *  - password reset codes: auth:reset:<code>
 *
 * All payloads are stored as simple strings (JSON for access payloads).
 */
@Service
public class RedisTokenService {

    private final StringRedisTemplate redis;

    public static final String PREFIX_ACCESS = "auth:access:";
    public static final String PREFIX_VERIFY = "auth:verify:";
    public static final String PREFIX_RESET  = "auth:reset:";

    public RedisTokenService(StringRedisTemplate redis) {
        this.redis = redis;
    }

    // -----------------------
    // ACCESS JTI (short-lived)
    // -----------------------
    public void storeJti(String jti, String payloadJson, long ttlSeconds) {
        String key = PREFIX_ACCESS + jti;
        redis.opsForValue().set(key, payloadJson, Duration.ofSeconds(ttlSeconds));
    }

    public boolean jtiExists(String jti) {
        String key = PREFIX_ACCESS + jti;
        Boolean b = redis.hasKey(key);
        return Boolean.TRUE.equals(b);
    }

    public void deleteJti(String jti) {
        redis.delete(PREFIX_ACCESS + jti);
    }


    /**
     * Store verification code -> email mapping.
     *
     * @param code short opaque code (generated by app)
     * @param email the user email to verify
     * @param ttlSeconds expiration in seconds (e.g. 15*60)
     */
    public void storeVerificationCode(String code, String email, long ttlSeconds) {
        String key = PREFIX_VERIFY + code;
        redis.opsForValue().set(key, email, Duration.ofSeconds(ttlSeconds));
    }

    /**
     * Return email associated with verification code, or null if missing/expired.
     */
    public String getEmailForVerificationCode(String code) {
        return redis.opsForValue().get(PREFIX_VERIFY + code);
    }

    public void deleteVerificationCode(String code) {
        redis.delete(PREFIX_VERIFY + code);
    }


    /**
     * Store reset code -> email mapping.
     *
     * @param code short opaque code (generated by app)
     * @param email the user email requesting reset
     * @param ttlSeconds expiration in seconds (e.g. 10*60)
     */
    public void storeResetCode(String code, String email, long ttlSeconds) {
        String key = PREFIX_RESET + code;
        redis.opsForValue().set(key, email, Duration.ofSeconds(ttlSeconds));
    }

    /**
     * Return email associated with reset code, or null if missing/expired.
     */
    public String getEmailForResetCode(String code) {
        return redis.opsForValue().get(PREFIX_RESET + code);
    }

    public void deleteResetCode(String code) {
        redis.delete(PREFIX_RESET + code);
    }


    /**
     * Safely fetch and delete a verification code returning the email if present.
     * Typical usage: read email -> activate user -> delete code.
     */
    public String consumeVerificationCode(String code) {
        String email = getEmailForVerificationCode(code);
        if (email != null) {
            deleteVerificationCode(code);
        }
        return email;
    }

    /**
     * Safely fetch and delete a reset code returning the email if present.
     */
    public String consumeResetCode(String code) {
        String email = getEmailForResetCode(code);
        if (email != null) {
            deleteResetCode(code);
        }
        return email;
    }
}
