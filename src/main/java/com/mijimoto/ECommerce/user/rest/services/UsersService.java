/*
 * Created on 2025-10-25 ( 20:29:49 )
 * Merged/edited 2025-10-27
 * Generated by Telosys ( https://www.telosys.org/ ) version 3.3.0
 */
package com.mijimoto.ECommerce.user.rest.services;

import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import com.mijimoto.ECommerce.user.persistence.entities.Users;
import com.mijimoto.ECommerce.user.persistence.repositories.UsersRepository;
import com.mijimoto.ECommerce.user.rest.dto.UsersDTO;
import com.mijimoto.ECommerce.common.rest.services.GenericService;

/**
 * REST service for entity "Users"
 *
 * This service provides the necessary operations required by the REST controller.
 * It includes registration (with password hashing), partial updates, activation,
 * password update, basic finders and delete, plus legacy commented methods for
 * backward compatibility.
 */
@Service
@Transactional
public class UsersService extends GenericService<Users, UsersDTO> {

    private static final Logger logger = LoggerFactory.getLogger(UsersService.class);

    private final UsersRepository repository;
    private final BCryptPasswordEncoder passwordEncoder;

    /**
     * Constructor (for Dependency Injection)
     *
     * @param repository the repository to be injected
     * @param passwordEncoder the password encoder for hashing passwords
     */
    public UsersService(UsersRepository repository, BCryptPasswordEncoder passwordEncoder) {
        super(Users.class, UsersDTO.class);
        this.repository = repository;
        this.passwordEncoder = passwordEncoder;
    }



    /**
     * Extracts the entity ID from DTO
     */
    private Integer getEntityId(UsersDTO dto) {
        return dto.getId();
    }

    /**
     * Validate foreign key references before persisting or updating.
     * Currently empty — add FK checks here if UsersDTO contains FK fields.
     *
     * @param dto UsersDTO to validate
     * @throws ResponseStatusException(HttpStatus.BAD_REQUEST) if invalid FK
     */
    private void validateForeignKeyReferences(UsersDTO dto) {
        // Implement FK validation if UsersDTO has foreign keys
    }


    /**
     * Finds all occurrences of the entity
     *
     * @return list of DTOs
     */
    public List<UsersDTO> findAll() {
        logger.debug("findAll()");
        Iterable<Users> all = repository.findAll();
        return entityListToDtoList(all);
    }

    /**
     * Finds the entity identified by the given PK
     *
     * @param id primary key
     * @return the DTO or null if not found
     */
    public UsersDTO findById(Integer id) {
        logger.debug("findById({})", id);
        Optional<Users> optionalEntity = repository.findById(id);
        return entityToDto(optionalEntity);
    }

    /**
     * Finds the entity by ID or throws exception
     *
     * @param id primary key
     * @return the DTO
     * @throws ResponseStatusException if not found (HTTP 404)
     */
    public UsersDTO findByIdOrThrow(Integer id) {
        logger.debug("findByIdOrThrow({})", id);
        Optional<Users> optionalEntity = repository.findById(id);
        if (!optionalEntity.isPresent()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                    String.format("Users with id %s not found", id));
        }
        return entityToDto(optionalEntity.get());
    }


    /**
     * Registers a new user with password hashing and validation.
     * By default, account is created as inactive (requires email verification).
     *
     * @param dto the DTO containing email, passwordHash (plain text password), fullName, etc.
     * @return the created DTO with generated ID
     * @throws ResponseStatusException if email already exists (409) or validation fails (400)
     */
    public UsersDTO register(UsersDTO dto) {
        logger.debug("register() - email: {}", dto.getEmail());

        // Validate required fields
        if (dto.getEmail() == null || dto.getEmail().trim().isEmpty()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Email is required");
        }
        if (dto.getPasswordHash() == null || dto.getPasswordHash().trim().isEmpty()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Password is required");
        }

        // Check if email already exists
        Optional<Users> existing = repository.findByEmail(dto.getEmail());
        if (existing.isPresent()) {
            throw new ResponseStatusException(HttpStatus.CONFLICT,
                    "User with email " + dto.getEmail() + " already exists");
        }

        // Hash the password
        String hashedPassword = passwordEncoder.encode(dto.getPasswordHash());
        dto.setPasswordHash(hashedPassword);

        // Set default values
        // Default to inactive — require email verification to activate
        if (dto.getIsActive() == null) {
            dto.setIsActive(false);
        }

        Instant now = Instant.now();
        dto.setCreatedAt(Date.from(now));
        dto.setUpdatedAt(Date.from(now));

        // Validate DTO (GenericService method)
        validateDto(dto);

        // Validate foreign keys if any
        validateForeignKeyReferences(dto);

        // Create entity
        Users entity = dtoToEntity(dto);
        Users saved = repository.save(entity);

        logger.info("User registered (pending verification) - id: {}, email: {}", saved.getId(), saved.getEmail());

        return entityToDto(saved);
    }

    /**
     * Activates a user account by email (e.g. after email verification).
     *
     * @param email user's email
     * @return updated UsersDTO
     * @throws ResponseStatusException if user not found (404)
     */
    public UsersDTO activateUserByEmail(String email) {
        Users u = repository.findByEmail(email)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found"));
        if (Boolean.TRUE.equals(u.getIsActive())) return entityToDto(u);
        u.setIsActive(true);
        u.setUpdatedAt(Date.from(Instant.now()));
        repository.save(u);
        logger.info("User activated: {}", email);
        return entityToDto(u);
    }


    /**
     * Updates partially the given entity if it exists.
     * Only updates non-null fields from DTO.
     *
     * @param id primary key
     * @param dto the DTO with fields to update
     * @return the updated DTO
     * @throws ResponseStatusException if entity not found (404) or FK validation fails (400)
     */
    public UsersDTO partialUpdate(Integer id, UsersDTO dto) {
        logger.debug("partialUpdate({}, {})", id, dto);

        Optional<Users> optionalEntity = repository.findById(id);
        if (!optionalEntity.isPresent()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                    String.format("Users with id %s not found", id));
        }

        // If password is being updated, hash it (skip if already hashed)
        if (dto.getPasswordHash() != null && !dto.getPasswordHash().trim().isEmpty()) {
            // BCrypt hashes start with $2a$, $2b$, or $2y$
            if (!dto.getPasswordHash().matches("^\\$2[aby]\\$.{56}$")) {
                dto.setPasswordHash(passwordEncoder.encode(dto.getPasswordHash()));
            }
        }

        // Validate foreign key references for non-null FK fields
        validateForeignKeyReferences(dto);

        Users entity = optionalEntity.get();

        // Update timestamp
        dto.setUpdatedAt(Date.from(Instant.now()));

        // Use GenericService's method to update entity from DTO (skips nulls)
        updateEntityFromDto(entity, dto);

        Users updated = repository.save(entity);
        logger.info("User partially updated - id: {}", updated.getId());
        return entityToDto(updated);
    }

    /**
     * Updates the user's password by email.
     *
     * @param email user's email
     * @param newPlainPassword new plain text password
     * @throws ResponseStatusException if user not found (404)
     */
    public void updatePassword(String email, String newPlainPassword) {
        Users u = repository.findByEmail(email)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found"));
        u.setPasswordHash(passwordEncoder.encode(newPlainPassword));
        u.setUpdatedAt(Date.from(Instant.now()));
        repository.save(u);
        logger.info("Password updated for user: {}", email);
    }


    /**
     * Deletes an entity by its PK
     *
     * @param id primary key
     * @throws ResponseStatusException if entity not found (HTTP 404)
     */
    public void deleteById(Integer id) {
        logger.debug("deleteById({})", id);

        if (!repository.existsById(id)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                    String.format("Users with id %s not found", id));
        }

        repository.deleteById(id);
        logger.info("User deleted - id: {}", id);
    }

    /**
     * Checks if entity exists by ID
     *
     * @param id primary key
     * @return true if exists, false otherwise
     */
    public boolean existsById(Integer id) {
        return repository.existsById(id);
    }

    // -----------------------------------------------------------------------------------------
    // DEPRECATED / legacy methods - kept commented for backward compatibility
    // -----------------------------------------------------------------------------------------

    /*
    @Deprecated
    public void save(Integer id, UsersDTO dto) {
        // DEPRECATED: replaced by update() / partialUpdate()
        Integer entityId = id;
        logger.warn("DEPRECATED: save() called with entityId: {}. Use update() or partialUpdate() instead.", entityId);

        validateForeignKeyReferences(dto);

        // Force PK in DTO
        dto.setId(id);

        repository.save(dtoToEntity(dto));
    }
    */

    /* ------------------------------------------------------------------
     * The full `update()` method is kept commented for reference.
     * Restore/comment as needed.
     * ------------------------------------------------------------------ */

    /*
    public UsersDTO update(UsersDTO dto) {
        logger.debug("update({})", dto);

        // Validate DTO
        validateDto(dto);

        Integer entityId = getEntityId(dto);

        // Check if exists
        if (!repository.existsById(entityId)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                    String.format("Users with id %s not found", entityId));
        }

        // Validate foreign key references AFTER confirming entity exists
        validateForeignKeyReferences(dto);

        Users entity = dtoToEntity(dto);
        Users updated = repository.save(entity);
        return entityToDto(updated);
    }
    */
}
