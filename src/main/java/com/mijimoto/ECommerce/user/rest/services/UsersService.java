/*
 * Created on 2025-10-25 ( 20:29:49 )
 * Generated by Telosys ( https://www.telosys.org/ ) version 3.3.0
 */
package com.mijimoto.ECommerce.user.rest.services;

import java.time.Instant;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;
import org.springframework.http.HttpStatus;

import com.mijimoto.ECommerce.user.persistence.entities.Users;
import com.mijimoto.ECommerce.user.persistence.repositories.UsersRepository;
import com.mijimoto.ECommerce.user.rest.dto.UsersDTO;
import com.mijimoto.ECommerce.common.rest.services.GenericService;


/**
 * REST service for entity "Users" <br>
 *
 * This service provides all the necessary operations required by the REST controller <br>
 * Enhanced to handle foreign key relationships with proper validation and error handling using
 * ResponseStatusException (Option A).
 *
 * @author Telosys
 *
 */
@Service
@Transactional
public class UsersService extends GenericService<Users, UsersDTO> {

    private static final Logger logger = LoggerFactory.getLogger(UsersService.class);

    private final UsersRepository repository;
    private final BCryptPasswordEncoder passwordEncoder;

    /**
     * Constructor (usable for Dependency Injection)
     *
     * @param repository the repository to be injected
     * @param passwordEncoder the password encoder for hashing passwords
     */
    public UsersService(UsersRepository repository, BCryptPasswordEncoder passwordEncoder) {
        super(Users.class, UsersDTO.class);
        this.repository = repository;
        this.passwordEncoder = passwordEncoder;
    }
    
    /**
     * Returns the entity ID object from the given DTO
     *
     * @param dto the DTO
     * @return the entity ID
     */
    private Integer getEntityId(UsersDTO dto) {
        return dto.getId();
    }

    /**
     * Validates foreign key references before persisting
     *
     * @param dto the DTO to validate
     * @throws ResponseStatusException if any FK reference is invalid (HTTP 400)
     */
    private void validateForeignKeyReferences(UsersDTO dto) {
    }

    /**
     * Finds all occurrences of the entity
     *
     * @return list of DTOs
     */
    public List<UsersDTO> findAll() {
        logger.debug("findAll()");
        Iterable<Users> all = repository.findAll();
        return entityListToDtoList(all);
    }

    /**
     * Finds the entity identified by the given PK
     *
     * @param id 
     * @return the DTO or null if not found
     */
    public UsersDTO findById(Integer id) {
        Integer entityId = id;
        logger.debug("findById({})", entityId);
        Optional<Users> optionalEntity = repository.findById(entityId);
        return entityToDto(optionalEntity);
    }

    /**
     * Finds the entity by ID or throws exception
     *
     * @param id 
     * @return the DTO
     * @throws ResponseStatusException if not found (HTTP 404)
     */
    public UsersDTO findByIdOrThrow(Integer id) {
        Integer entityId = id;
        logger.debug("findByIdOrThrow({})", entityId);
        Optional<Users> optionalEntity = repository.findById(entityId);
        if (!optionalEntity.isPresent()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                    String.format("Users with id %s not found", entityId));
        }
        return entityToDto(optionalEntity.get());
    }

    /**
     * Registers a new user with password hashing and validation
     * 
     * @param dto the DTO containing email, passwordHash (plain text password), fullName, etc.
     * @return the created DTO with generated ID
     * @throws ResponseStatusException if email already exists (409) or validation fails (400)
     */
    public UsersDTO register(UsersDTO dto) {
        logger.debug("register() - email: {}", dto.getEmail());
        
        // Validate required fields
        if (dto.getEmail() == null || dto.getEmail().trim().isEmpty()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Email is required");
        }
        if (dto.getPasswordHash() == null || dto.getPasswordHash().trim().isEmpty()) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Password is required");
        }
        
        // Check if email already exists
        Optional<Users> existing = repository.findByEmail(dto.getEmail());
        if (existing.isPresent()) {
            throw new ResponseStatusException(HttpStatus.CONFLICT, 
                    "User with email " + dto.getEmail() + " already exists");
        }
        
        // Hash the password
        String hashedPassword = passwordEncoder.encode(dto.getPasswordHash());
        dto.setPasswordHash(hashedPassword);
        
        // Set default values
        if (dto.getIsActive() == null) {
            dto.setIsActive(true);
        }
        
        Instant now = Instant.now();
        dto.setCreatedAt(Date.from(now));
        dto.setUpdatedAt(Date.from(now));
        
        // Validate DTO
        validateDto(dto);
        
        // Validate foreign key references
        validateForeignKeyReferences(dto);
        
        // Create entity
        Users entity = dtoToEntity(dto);
        Users saved = repository.save(entity);
        
        logger.info("User registered successfully - id: {}, email: {}", saved.getId(), saved.getEmail());
        
        return entityToDto(saved);
    }

    /**
     * Updates partially the given entity if it exists <br>
     * Only updates non-null fields from DTO <br>
     * Validates foreign key references for non-null FK fields
     *
     * @param id 
     * @param dto the DTO with fields to update
     * @return the updated DTO
     * @throws ResponseStatusException if entity not found (404) or FK validation fails (400)
     */
    public UsersDTO partialUpdate(Integer id, UsersDTO dto) {
        Integer entityId = id;
        logger.debug("partialUpdate({}, {})", entityId, dto);
        
        Optional<Users> optionalEntity = repository.findById(entityId);
        if (!optionalEntity.isPresent()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                    String.format("Users with id %s not found", entityId));
        }
        
        // If password is being updated, hash it
        if (dto.getPasswordHash() != null && !dto.getPasswordHash().trim().isEmpty()) {
            // Check if it's already hashed (BCrypt hashes start with $2a$, $2b$, or $2y$)
            if (!dto.getPasswordHash().matches("^\\$2[aby]\\$.{56}$")) {
                dto.setPasswordHash(passwordEncoder.encode(dto.getPasswordHash()));
            }
        }
        
        // Validate foreign key references for non-null FK fields
        validateForeignKeyReferences(dto);
        
        Users entity = optionalEntity.get();
        
        // Update timestamp
        dto.setUpdatedAt(Date.from(Instant.now()));
        
        // Use GenericService's updateEntityFromDto which skips nulls
        updateEntityFromDto(entity, dto);
        
        Users updated = repository.save(entity);
        return entityToDto(updated);
    }

    /**
     * Deletes an entity by its PK
     *
     * @param id 
     * @throws ResponseStatusException if entity not found (HTTP 404)
     */
    public void deleteById(Integer id) {
        Integer entityId = id;
        logger.debug("deleteById({})", entityId);
        
        if (!repository.existsById(entityId)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                    String.format("Users with id %s not found", entityId));
        }
        
        repository.deleteById(entityId);
    }

    /**
     * Checks if entity exists by ID
     *
     * @param id 
     * @return true if exists, false otherwise
     */
    public boolean existsById(Integer id) {
        Integer entityId = id;
        return repository.existsById(entityId);
    }

    // -----------------------------------------------------------------------------------------
    // Specific "finders" for foreign key relationships
    // -----------------------------------------------------------------------------------------

    // -----------------------------------------------------------------------------------------
    // DEPRECATED METHODS - Use the improved methods above instead
    // These are kept for backward compatibility but should not be used in new code
    // -----------------------------------------------------------------------------------------
    
    /*
    @Deprecated
    public void save(Integer id, UsersDTO dto) {
        // DEPRECATED: This method has been replaced by update() which returns the updated entity
        // and provides better error handling with exceptions
        Integer entityId = id;
        logger.warn("DEPRECATED: save() called with entityId: {}. Use update() instead.", entityId);
        
        validateForeignKeyReferences(dto);
        
        // Force PK in DTO
        dto.setId(id);
        
        repository.save(dtoToEntity(dto));
    }
    */

    /* ------------------------------------------------------------------
     * The full `update()` method was intentionally moved to the end of
     * the file and commented out as requested. Keep it commented while
     * preserving the implementation for easy restoration or reference.
     * ------------------------------------------------------------------ */

   
    /**
     * Updates the given entity if it exists <br>
     * Validates foreign key references before updating
     *
     * @param dto the DTO to update
     * @return the updated DTO
     * @throws ResponseStatusException if entity not found (404) or FK validation fails (400)
     */
 /*
    public UsersDTO update(UsersDTO dto) {
        logger.debug("update({})", dto);
        
        // Validate DTO
        validateDto(dto);
        
        Integer entityId = getEntityId(dto);
        
        // Check if exists
        if (!repository.existsById(entityId)) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND,
                    String.format("Users with id %s not found", entityId));
        }
        
        // Validate foreign key references AFTER confirming entity exists
        validateForeignKeyReferences(dto);
        
        Users entity = dtoToEntity(dto);
        Users updated = repository.save(entity);
        return entityToDto(updated);
    }
    */
}