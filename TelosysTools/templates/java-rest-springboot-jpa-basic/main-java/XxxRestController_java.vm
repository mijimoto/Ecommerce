## --------------------------------------------------
#if ( $entity.isJoinEntity() )
#cancel("No CONTROLLER class for join entity")
#end
## --------------------------------------------------
#checkId($entity)
#using("REST_API_ROOT")
#parse("include/init_var_entity.vm")

##---------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder(${SRC})};

#foreach( $import in $java.imports($entity.keyAttributes) )
import $import;
#end
import java.util.List;

import jakarta.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import ${ROOT_PKG}.rest.dto.${dtoClass};
import ${ROOT_PKG}.rest.services.${serviceClass};

## ---- Build REST path and @PathVariable declarations for all ID fields ----
#set($REST_PATH_FOR_ID = "")
#set($REST_PARAM_FOR_ID = "")
#set($ID_ARGS = "")
#set($sep = "")
#foreach( $key in $entity.keyAttributes )
  #set($REST_PATH_FOR_ID = "${REST_PATH_FOR_ID}/{${key.name}}")
  #set($REST_PARAM_FOR_ID = "${REST_PARAM_FOR_ID}${sep}@PathVariable ${key.type} ${key.name}")
  #set($ID_ARGS = "${ID_ARGS}${sep}${key.name}")
  #set($sep = ", ")
#end

/**
 * REST Controller for ${entity.name}
 * 
 * Provides CRUD operations via HTTP endpoints
 * All exceptions are handled by GlobalExceptionHandler
 * 
 * @author Telosys
 */
@CrossOrigin(origins = "*")
@RestController
@RequestMapping(value = "${REST_API_ROOT}/${fn.toLowerCase($entity.name)}", produces = MediaType.APPLICATION_JSON_VALUE)
public class ${controllerClass} {

    private static final Logger logger = LoggerFactory.getLogger(${controllerClass}.class);

    private final ${serviceClass} service;

    @Autowired
    public ${controllerClass}(${serviceClass} service) {
        this.service = service;
    }

    /**
     * GET all ${entity.name}
     *
     * @return list of ${entity.name} DTOs
     */
    @GetMapping
    public ResponseEntity<List<${dtoClass}>> findAll() {
        logger.debug("GET - findAll");
        List<${dtoClass}> list = service.findAll();
        return ResponseEntity.ok(list);
    }

    /**
     * GET ${entity.name} by ID
     * 
#foreach( $attribute in $entity.keyAttributes )
     * @param $attribute.name
#end
     * @return ${entity.name} DTO or 404 if not found
     */
    @GetMapping("${REST_PATH_FOR_ID}")
    public ResponseEntity<${dtoClass}> findById($REST_PARAM_FOR_ID) {
        logger.debug("GET - findById: {}", $ID_ARGS);
        
        ${dtoClass} dto = service.findById($ID_ARGS);
        
        if (dto != null) {
            return ResponseEntity.ok(dto);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    /**
     * POST - Create new ${entity.name}
     * 
     * @param ${fn.uncapitalize($entity.name)}DTO the DTO to create
     * @return 201 Created with the created DTO, or 400/422 on validation error
     */
    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<${dtoClass}> create(@Valid @RequestBody ${dtoClass} ${fn.uncapitalize($entity.name)}DTO) {
        logger.debug("POST - create: {}", ${fn.uncapitalize($entity.name)}DTO);
        
        ${dtoClass} created = service.create(${fn.uncapitalize($entity.name)}DTO);
        return ResponseEntity.status(HttpStatus.CREATED).body(created);
    }

    /**
     * PATCH - Partial update of ${entity.name}
     * Only updates fields that are present (non-null) in the request body
     * 
#foreach( $attribute in $entity.keyAttributes )
     * @param $attribute.name
#end
     * @param ${fn.uncapitalize($entity.name)}DTO the DTO with fields to update
     * @return 200 OK with updated DTO, or 404 if not found
     */
    @PatchMapping(value = "${REST_PATH_FOR_ID}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<${dtoClass}> partialUpdate(
            $REST_PARAM_FOR_ID,
            @RequestBody ${dtoClass} ${fn.uncapitalize($entity.name)}DTO) {
        logger.debug("PATCH - partialUpdate: id={}, dto={}", $ID_ARGS, ${fn.uncapitalize($entity.name)}DTO);
        
        ${dtoClass} updated = service.partialUpdate($ID_ARGS, ${fn.uncapitalize($entity.name)}DTO);
        return ResponseEntity.ok(updated);
    }

    /**
     * DELETE ${entity.name} by ID
     * 
#foreach( $attribute in $entity.keyAttributes )
     * @param $attribute.name
#end
     * @return 204 No Content if deleted, or 404 if not found
     */
    @DeleteMapping("${REST_PATH_FOR_ID}")
    public ResponseEntity<Void> deleteById($REST_PARAM_FOR_ID) {
        logger.debug("DELETE - deleteById: {}", $ID_ARGS);
        
        service.deleteById($ID_ARGS);
        return ResponseEntity.noContent().build();
    }

}